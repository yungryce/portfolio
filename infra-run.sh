#!/usr/bin/env bash
set -euo pipefail

# Defaults (override by exporting before running)
ResourceGroupName="${ResourceGroupName:-RGportfolioWestEU}"
Location="${Location:-westeurope}"
Suffix="${Suffix:-dev01}"

echo "RG=$ResourceGroupName | Location=$Location | Suffix=$Suffix"

# Require Azure CLI
command -v az >/dev/null 2>&1 || { echo "az CLI required. Install and run 'az login'." >&2; exit 1; }
if ! az account show >/dev/null 2>&1; then
  echo "Not logged in. Run: az login --use-device-code"
  exit 1
fi

# Ensure RG
if ! az group show --name "$ResourceGroupName" --query "name" -o tsv >/dev/null 2>&1; then
  echo "Creating Resource Group: $ResourceGroupName"
  az group create --name "$ResourceGroupName" --location "$Location" --only-show-errors 1>/dev/null
else
  echo "Resource Group $ResourceGroupName already exists"
fi

# Deploy
SANITIZED_SUFFIX="${Suffix//[^a-zA-Z0-9-]/-}"
DEPLOYMENT_NAME="infra-${SANITIZED_SUFFIX}-$(date +%s)"
echo "Starting deployment: $DEPLOYMENT_NAME"

az deployment group create \
  --name "$DEPLOYMENT_NAME" \
  --resource-group "$ResourceGroupName" \
  --template-file infra/main.bicep \
  --parameters \
    location="$Location" \
    suffix="$Suffix" \
  --mode Incremental \
  --output json >/tmp/infra-deploy-result.json

echo "Deployment complete. Fetching outputs..."

# Read outputs individually (no jq dependency)
get_out() {
  az deployment group show \
    --resource-group "$ResourceGroupName" \
    --name "$DEPLOYMENT_NAME" \
    --query "properties.outputs.$1.value" -o tsv 2>/dev/null || true
}

FunctionAppName="$(get_out functionAppName)"
StorageAccountName="$(get_out storageAccountName)"
KeyVaultName="$(get_out keyVaultName)"
StaticWebAppName="$(get_out staticWebAppName)"
UserAssignedIdentityName="$(get_out userAssignedIdentityName)"

# Fallbacks if outputs missing
: "${FunctionAppName:=fa-portfolio-${Suffix}}"
: "${StorageAccountName:=stgportfolio${Suffix}}"
: "${KeyVaultName:=kv-portfolio-${Suffix}}"
: "${StaticWebAppName:=swa-portfolio-${Suffix}}"
: "${UserAssignedIdentityName:=uami-portfolio-${Suffix}}"

# Emit simple env file inside repo so pipeline can read it
ENV_FILE="infra/outputs.env"
cat > "$ENV_FILE" <<EOF
# Generated by infra-run.sh — commit this file so the app pipeline can consume it.
FunctionAppName=$FunctionAppName
ResourceGroupName=$ResourceGroupName
StorageAccountName=$StorageAccountName
KeyVaultName=$KeyVaultName
StaticWebAppName=$StaticWebAppName
UserAssignedIdentityName=$UserAssignedIdentityName
EOF

echo "Wrote $ENV_FILE"
echo "Preview:"
cat "$ENV_FILE"

# Generate new SWA deployment token using the correct variable
echo ""
echo "Fetching SWA deployment token..."
SWA_TOKEN=$(az staticwebapp secrets list \
  --name "$StaticWebAppName" \
  --resource-group "$ResourceGroupName" \
  --query properties.apiKey \
  -o tsv)

echo "SWA deployment token: $SWA_TOKEN"

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📋 AZURE DEVOPS PIPELINE SETUP REMINDERS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "1️⃣  UPDATE VARIABLE GROUP:"
echo "   • Go to Azure DevOps → Pipelines → Library → portfolio-secrets"
echo "   • Update SWA_TOKEN with: $SWA_TOKEN"
echo "   • Save the variable group"
echo ""
echo "2️⃣  GRANT SERVICE PRINCIPAL PERMISSIONS (ONE-TIME SETUP):"
echo "   If your pipeline fails with 403 errors like 'publishxml/action' or 'config/list/action',"
echo "   the Azure DevOps service principal needs Contributor access to this resource group."
echo ""
echo "   Run this command ONCE (manually, not in automation):"
echo "   ┌────────────────────────────────────────────────────────────────────────────────────┐"
echo "   │ az role assignment create \\                                                         │"
echo "   │   --assignee-object-id \"04cf7782-5697-4f07-b888-8887edbfeae6\" \\                    │"
echo "   │   --assignee-principal-type ServicePrincipal \\                                      │"
echo "   │   --role \"Contributor\" \\                                                            │"
echo "   │   --scope \"/subscriptions/105a58e6-5ddb-4fca-a952-fc0f81314fdc/resourceGroups/$ResourceGroupName\" │"
echo "   └────────────────────────────────────────────────────────────────────────────────────┘"
echo ""
echo "   To verify the assignment:"
echo "   ┌────────────────────────────────────────────────────────────────────────────────────┐"
echo "   │ az role assignment list \\                                                           │"
echo "   │   --assignee-object-id \"04cf7782-5697-4f07-b888-8887edbfeae6\" \\                    │"
echo "   │   --scope \"/subscriptions/105a58e6-5ddb-4fca-a952-fc0f81314fdc/resourceGroups/$ResourceGroupName\" \\  │"
echo "   │   -o table                                                                           │"
echo "   └────────────────────────────────────────────────────────────────────────────────────┘"
echo ""
echo "   Note: The Object ID '04cf7782-5697-4f07-b888-8887edbfeae6' is from your pipeline error logs."
echo "        This is your Azure DevOps service connection's service principal, not your personal account."
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Next:"
echo "  git add $ENV_FILE && git commit -m 'chore(infra): update outputs' && git push"