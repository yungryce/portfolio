---
# Infrastructure Deployment Pipeline
# Purpose: Deploy Azure infrastructure for portfolio project
# - Triggers only on infrastructure changes or manual runs
# - Deploys Bicep template to create all Azure resources
# - Outputs resource names/IDs for application pipeline consumption
# - Uses portfolio service connection for authentication

trigger:
  branches:
    include:
      - feature/infra
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

pr:
  branches:
    include:
      - feature/infra
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

variables:
  - name: AzureServiceConnection
    value: 'svc-portfolio-rg-conn'
  - name: Location
    value: 'westeurope'
  - name: ResourceGroupName
    value: 'RGportfolioWestEU'
  - name: Suffix
    value: 'dev000'  # Stable environment suffix (keep constant for this environment)
  - name: DevOpsRepoUrl
    value: 'https://dev.azure.com/chxgbx/portfolio/_git/portfolio'
  - name: DevOpsBranch
    value: 'main'   # SWA/app branch to link to (change if you truly want infra to point at feature/infra)
  - group: portfolio-secrets

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Validate_Infrastructure
    displayName: "Validate Infrastructure"
    jobs:
      - job: validate_bicep
        displayName: "Validate Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"

          # Validate Bicep template with static RG
          - task: AzureCLI@2
            displayName: "Validate Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e

                echo "Validating Bicep template for Resource Group: $(ResourceGroupName)"

                # What-if deployment to preview changes
                az deployment group what-if \
                  --resource-group "$(ResourceGroupName)" \
                  --template-file infra/main.bicep \
                  --parameters \
                    location="$(Location)" \
                    suffix="$(Suffix)" \
                    devOpsRepoUrl="$(DevOpsRepoUrl)" \
                    devOpsBranch="$(DevOpsBranch)" \
                  --only-show-errors || true

                echo "✅ Bicep template validation completed"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

  - stage: Deploy_Infrastructure
    displayName: "Deploy Infrastructure"
    dependsOn: Validate_Infrastructure
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/feature/infra'))
    jobs:
      - job: deploy_bicep
        displayName: "Deploy Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"
          - script: |
              echo "Azure CLI (preinstalled) version:"
              az version --output table || az --version
            displayName: "Show Azure CLI Version"
          # Deploy infrastructure with static RG and existence check
          - task: AzureCLI@2
            name: deployInfra            # <-- NAME REQUIRED FOR OUTPUTS
            displayName: "Deploy Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                echo "Resource Group target: $(ResourceGroupName)"

                if ! az group show --name "$(ResourceGroupName)" --query "name" -o tsv 2>/dev/null; then
                  echo "Creating Resource Group: $(ResourceGroupName)"
                  az group create --name "$(ResourceGroupName)" --location "$(Location)" --only-show-errors 1>/dev/null
                else
                  echo "Resource Group $(ResourceGroupName) already exists"
                fi

                echo "Starting deployment..."
                # Run deployment (no redirection to avoid double stream consumption)
                if ! az deployment group create \
                  --name main \
                  --resource-group "$(ResourceGroupName)" \
                  --template-file infra/main.bicep \
                  --parameters \
                    location='$(Location)' \
                    suffix='$(Suffix)' \
                    devOpsRepoUrl='$(DevOpsRepoUrl)' \
                    devOpsBranch='$(DevOpsBranch)' \
                  --mode Incremental \
                  --only-show-errors \
                  --no-prompt; then
                  echo "❌❌❌ Deployment failed"
                  exit 1
                fi

                echo "✅ Deployment finished. Fetching outputs..."
                OUTPUTS_JSON=$(az deployment group show \
                  --resource-group "$(ResourceGroupName)" \
                  --name main \
                  --query "properties.outputs" -o json 2>/dev/null || echo "{}")

                echo "$OUTPUTS_JSON" > /tmp/deploy_outputs.json

                if command -v jq >/dev/null 2>&1; then
                  echo "📊 Outputs:"
                  echo "$OUTPUTS_JSON" | jq -r 'to_entries[] | "  \(.key): \(.value.value)"' || true
                else
                  echo "Raw outputs:"
                  cat /tmp/deploy_outputs.json
                fi

                # Safe extraction helper
                get_output () {
                  echo "$OUTPUTS_JSON" | jq -r --arg k "$1" '(.[$k].value // empty)' 2>/dev/null || true
                }

                # Fallback to deterministic names if template output absent (should exist)
                FUNCTION_APP_NAME="$(get_output functionAppName)"
                STORAGE_ACCOUNT_NAME="$(get_output storageAccountName)"
                STATIC_WEB_APP_NAME="$(get_output staticWebAppName)"
                KEY_VAULT_NAME="$(get_output keyVaultName)"
                UAMI_NAME="$(get_output userAssignedIdentityName)"

                # If any critical value empty, infer from naming convention
                : "${FUNCTION_APP_NAME:=fa-portfolio-$(Suffix)}"
                : "${STORAGE_ACCOUNT_NAME:=stgportfolio$(Suffix)}"
                : "${STATIC_WEB_APP_NAME:=swa-portfolio-$(Suffix)}"
                : "${KEY_VAULT_NAME:=kv-portfolio-$(Suffix)}"
                : "${UAMI_NAME:=uami-portfolio-$(Suffix)}"

                echo "Setting pipeline output variables..."
                echo "##vso[task.setvariable variable=FunctionAppName;isOutput=true]${FUNCTION_APP_NAME}"
                echo "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$(ResourceGroupName)"
                echo "##vso[task.setvariable variable=StorageAccountName;isOutput=true]${STORAGE_ACCOUNT_NAME}"
                echo "##vso[task.setvariable variable=KeyVaultName;isOutput=true]${KEY_VAULT_NAME}"
                echo "##vso[task.setvariable variable=StaticWebAppName;isOutput=true]${STATIC_WEB_APP_NAME}"
                echo "##vso[task.setvariable variable=UserAssignedIdentityName;isOutput=true]${UAMI_NAME}"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

          # Show Deployment Outputs with static RG
          - task: AzureCLI@2
            displayName: "Show Deployment Outputs"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "🔍 Deployment Summary:"
                echo "=========================="

                # Get deployment outputs
                OUTPUTS=$(az deployment group show \
                  --resource-group "$(ResourceGroupName)" \
                  --name main \
                  --query "properties.outputs" \
                  --output json 2>/dev/null || echo "{}")

                if [ "$OUTPUTS" != "{}" ]; then
                  echo "📊 Outputs:"
                  echo "$OUTPUTS" | jq -r 'to_entries[] | "  \(.key): \(.value.value)"'
                else
                  echo "  No outputs available"
                fi

                echo ""
                echo "🔑 Key Vault Secrets to Add:"
                echo "  az keyvault secret set --vault-name kv-portfolio-$(Suffix) --name GROQ-API-KEY --value '<your-groq-key>'"
                echo "  az keyvault secret set --vault-name kv-portfolio-$(Suffix) --name GITHUB-TOKEN --value '<your-github-token>'"
