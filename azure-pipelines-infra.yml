---
# Infrastructure Deployment Pipeline
# Purpose: Deploy Azure infrastructure for portfolio project
# - Triggers only on infrastructure changes or manual runs
# - Deploys Bicep template to create all Azure resources
# - Outputs resource names/IDs for application pipeline consumption
# - Uses portfolio service connection for authentication

trigger:
  branches:
    include:
      - feature/infra
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

pr:
  branches:
    include:
      - feature/infra
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

variables:
  - name: AzureServiceConnection
    value: 'svc-portfolio-rg-conn'
  - name: Location
    value: 'westeurope'
  - name: ResourceGroupName
    value: 'portfolioWestEURG'
  - name: Suffix
    value: 'dev000'
  - name: DevOpsRepoUrl
    value: 'https://dev.azure.com/chxgbx/portfolio/_git/portfolio'
  - name: DevOpsBranch
    value: 'feature/infra'
  - group: portfolio-secrets

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Validate_Infrastructure
    displayName: "Validate Infrastructure"
    jobs:
      - job: validate_bicep
        displayName: "Validate Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"

          # Validate Bicep template with static RG
          - task: AzureCLI@2
            displayName: "Validate Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e

                echo "Validating Bicep template for Resource Group: $(ResourceGroupName)"

                # What-if deployment to preview changes
                az deployment group what-if \
                  --resource-group "$(ResourceGroupName)" \
                  --template-file infra/main.bicep \
                  --parameters \
                    location="$(Location)" \
                    suffix="$(Suffix)" \
                    devOpsRepoUrl="$(DevOpsRepoUrl)" \
                    devOpsBranch="$(Build.SourceBranchName)" \
                  --only-show-errors || true

                echo "✅ Bicep template validation completed"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

  - stage: Deploy_Infrastructure
    displayName: "Deploy Infrastructure"
    dependsOn: Validate_Infrastructure
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/feature/infra'))
    jobs:
      - job: deploy_bicep
        displayName: "Deploy Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"
          - script: |
              echo "Azure CLI (preinstalled) version:"
              az version --output table || az --version
            displayName: "Show Azure CLI Version"

          - task: AzureCLI@2
            name: deployInfra
            displayName: "Deploy Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                $ErrorActionPreference = 'Stop'
                
                Write-Host "Resource Group target: $(ResourceGroupName)"
                
                # Check if resource group exists, create if it doesn't
                $rgExists = az group show --name "$(ResourceGroupName)" --query "name" -o tsv 2>$null
                if (-not $rgExists) {
                    Write-Host "Creating Resource Group: $(ResourceGroupName)"
                    az group create --name "$(ResourceGroupName)" --location "$(Location)" --only-show-errors | Out-Null
                } else {
                    Write-Host "Resource Group $(ResourceGroupName) already exists"
                }
                
                Write-Host "Starting deployment..."
                
                # Deploy using PowerShell with table output
                $deployResult = az deployment group create `
                  --name "infra-$(Build.SourceBranchName)-$(Build.BuildId)" `
                  --resource-group "$(ResourceGroupName)" `
                  --template-file infra/main.bicep `
                  --parameters `
                    location='$(Location)' `
                    suffix='$(Suffix)' `
                    devOpsRepoUrl='$(DevOpsRepoUrl)' `
                    devOpsBranch='$(Build.SourceBranchName)' `
                  --mode Incremental `
                  --output table
                
                if ($LASTEXITCODE -ne 0) {
                    Write-Error "❌❌❌ Deployment failed with exit code: $LASTEXITCODE"
                    exit $LASTEXITCODE
                }
                
                Write-Host "✅ Deployment completed successfully"
                
                # Fetch and set output variables for other pipelines
                Write-Host "Fetching deployment outputs..."
                $outputsJson = az deployment group show `
                  --resource-group "$(ResourceGroupName)" `
                  --name "infra-$(Build.SourceBranchName)-$(Build.BuildId)" `
                  --query "properties.outputs" `
                  --output json 2>$null
                
                if ($outputsJson -and $outputsJson -ne "{}") {
                    $outputs = $outputsJson | ConvertFrom-Json
                    
                    # Extract output values with fallbacks
                    $functionAppName = if ($outputs.functionAppName) { $outputs.functionAppName.value } else { "fa-portfolio-$(Suffix)" }
                    $storageAccountName = if ($outputs.storageAccountName) { $outputs.storageAccountName.value } else { "stgportfolio$(Suffix)" }
                    $keyVaultName = if ($outputs.keyVaultName) { $outputs.keyVaultName.value } else { "kv-portfolio-$(Suffix)" }
                    $staticWebAppName = if ($outputs.staticWebAppName) { $outputs.staticWebAppName.value } else { "swa-portfolio-$(Suffix)" }
                    $uamiName = if ($outputs.userAssignedIdentityName) { $outputs.userAssignedIdentityName.value } else { "uami-portfolio-$(Suffix)" }
                    
                    Write-Host "📊 Retrieved outputs:"
                    Write-Host "  FunctionAppName: $functionAppName"
                    Write-Host "  StorageAccountName: $storageAccountName"
                    Write-Host "  KeyVaultName: $keyVaultName"
                    Write-Host "  StaticWebAppName: $staticWebAppName"
                    Write-Host "  UserAssignedIdentityName: $uamiName"
                    
                    # Set pipeline output variables for consumption by other pipelines
                    Write-Host "Setting pipeline output variables..."
                    Write-Host "##vso[task.setvariable variable=FunctionAppName;isOutput=true]$functionAppName"
                    Write-Host "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$(ResourceGroupName)"
                    Write-Host "##vso[task.setvariable variable=StorageAccountName;isOutput=true]$storageAccountName"
                    Write-Host "##vso[task.setvariable variable=KeyVaultName;isOutput=true]$keyVaultName"
                    Write-Host "##vso[task.setvariable variable=StaticWebAppName;isOutput=true]$staticWebAppName"
                    Write-Host "##vso[task.setvariable variable=UserAssignedIdentityName;isOutput=true]$uamiName"
                } else {
                    Write-Host "No outputs available, using fallback values"
                    # Set fallback values
                    Write-Host "##vso[task.setvariable variable=FunctionAppName;isOutput=true]fa-portfolio-$(Suffix)"
                    Write-Host "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$(ResourceGroupName)"
                    Write-Host "##vso[task.setvariable variable=StorageAccountName;isOutput=true]stgportfolio$(Suffix)"
                    Write-Host "##vso[task.setvariable variable=KeyVaultName;isOutput=true]kv-portfolio-$(Suffix)"
                    Write-Host "##vso[task.setvariable variable=StaticWebAppName;isOutput=true]swa-portfolio-$(Suffix)"
                    Write-Host "##vso[task.setvariable variable=UserAssignedIdentityName;isOutput=true]uami-portfolio-$(Suffix)"
                }

          # Show Deployment Outputs with static RG
          - task: AzureCLI@2
            displayName: "Show Deployment Outputs"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "🔍 Deployment Summary:"
                Write-Host "=========================="
                
                # Get deployment outputs
                $outputsJson = az deployment group show `
                  --resource-group "$(ResourceGroupName)" `
                  --name "infra-$(Build.SourceBranchName)-$(Build.BuildId)" `
                  --query "properties.outputs" `
                  --output json 2>$null
                
                if ($outputsJson -and $outputsJson -ne "{}") {
                    Write-Host "📊 Outputs:"
                    $outputs = $outputsJson | ConvertFrom-Json
                    $outputs | Get-Member -MemberType NoteProperty | ForEach-Object {
                        $key = $_.Name
                        $value = $outputs.$key.value
                        Write-Host "  $key`: $value"
                    }
                } else {
                    Write-Host "  No outputs available"
                }
                
                Write-Host ""
                Write-Host "🔑 Key Vault Secrets to Add:"
                Write-Host "  az keyvault secret set --vault-name kv-portfolio-$(Suffix) --name GROQ-API-KEY --value '<your-groq-key>'"
                Write-Host "  az keyvault secret set --vault-name kv-portfolio-$(Suffix) --name GITHUB-TOKEN --value '<your-github-token>'"


