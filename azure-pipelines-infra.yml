# Infrastructure Deployment Pipeline
# Purpose: Deploy Azure infrastructure for portfolio project
# - Triggers only on infrastructure changes or manual runs
# - Deploys Bicep template to create all Azure resources
# - Outputs resource names/IDs for application pipeline consumption
# - Uses portfolio service connection for authentication

trigger:
  branches:
    include:
      - staging
      - main
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

pr:
  branches:
    include:
      - staging
      - main
      - feature/*
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

variables:
  - name: AzureServiceConnection
    value: 'portfolio'
  - name: Location  
    value: 'westeurope'
  - name: Suffix
    value: ''  # Leave empty to auto-generate random suffix
  - name: DevOpsRepoUrl
    value: 'https://dev.azure.com/chxgbx/portfolio/_git/portfolio'
  - name: DevOpsBranch
    value: 'staging'
  - name: EnablePurgeProtection
    value: 'false'
  - name: EnableRunFromPackage
    value: 'true'
  - group: portfolio-secrets  # Contains AppInsightsConnectionString

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Validate_Infrastructure
    displayName: "Validate Infrastructure"
    jobs:
      - job: validate_bicep
        displayName: "Validate Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"

          # Generate suffix for validation
          - script: |
              if [ -z "$(Suffix)" ]; then
                RAND=$(tr -dc a-z0-9 </dev/urandom | head -c 6)
                echo "Generated suffix for validation: $RAND"
                echo "##vso[task.setvariable variable=GeneratedSuffix]$RAND"
              else
                echo "Using provided suffix: $(Suffix)"
                echo "##vso[task.setvariable variable=GeneratedSuffix]$(Suffix)"
              fi
            displayName: "Generate suffix"

          # Validate Bicep template
          - task: AzureCLI@2
            displayName: "Validate Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                
                RG_NAME="portfolio$(GeneratedSuffix)"
                echo "Validating Bicep template for Resource Group: $RG_NAME"
                
                # What-if deployment to preview changes
                az deployment group what-if \
                  --resource-group "$RG_NAME" \
                  --template-file infra/main.bicep \
                  --parameters \
                    location="$(Location)" \
                    suffix="$(GeneratedSuffix)" \
                    devOpsRepoUrl="$(DevOpsRepoUrl)" \
                    devOpsBranch="$(DevOpsBranch)" \
                    appInsightsConnectionString="$(AppInsightsConnectionString)" \
                    enablePurgeProtection=$(EnablePurgeProtection) \
                    enableRunFromPackage=$(EnableRunFromPackage) \
                  --only-show-errors || true
                
                echo "✅ Bicep template validation completed"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

  - stage: Deploy_Infrastructure
    displayName: "Deploy Infrastructure"
    dependsOn: Validate_Infrastructure
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/staging'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    jobs:
      - job: deploy_bicep
        displayName: "Deploy Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"

          # Generate random suffix if not provided
          - script: |
              if [ -z "$(Suffix)" ]; then
                RAND=$(tr -dc a-z0-9 </dev/urandom | head -c 6)
                echo "Generated suffix: $RAND"
                echo "##vso[task.setvariable variable=GeneratedSuffix]$RAND"
              else
                echo "Using provided suffix: $(Suffix)"
                echo "##vso[task.setvariable variable=GeneratedSuffix]$(Suffix)"
              fi
            displayName: "Generate suffix"

          # Deploy infrastructure
          - task: AzureCLI@2
            displayName: "Deploy Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                
                # Resource group name with suffix
                RG_NAME="portfolio$(GeneratedSuffix)"
                echo "Deploying to Resource Group: $RG_NAME"
                
                # Create resource group
                echo "Creating resource group..."
                az group create \
                  --name "$RG_NAME" \
                  --location "$(Location)" \
                  --only-show-errors
                
                # Deploy Bicep template
                echo "Deploying Bicep template..."
                az deployment group create \
                  --resource-group "$RG_NAME" \
                  --template-file infra/main.bicep \
                  --parameters \
                    location="$(Location)" \
                    suffix="$(GeneratedSuffix)" \
                    devOpsRepoUrl="$(DevOpsRepoUrl)" \
                    devOpsBranch="$(DevOpsBranch)" \
                    appInsightsConnectionString="$(AppInsightsConnectionString)" \
                    enablePurgeProtection=$(EnablePurgeProtection) \
                    enableRunFromPackage=$(EnableRunFromPackage) \
                  --only-show-errors \
                  --output table
                
                echo "✅ Infrastructure deployment completed successfully"
                echo ""
                echo "📋 Next Steps:"
                echo "=============="
                echo "1. Add secrets to Key Vault: kv-portfolio-$(GeneratedSuffix)"
                echo "   az keyvault secret set --vault-name kv-portfolio-$(GeneratedSuffix) --name GROQ-API-KEY --value '<your-groq-key>'"
                echo "   az keyvault secret set --vault-name kv-portfolio-$(GeneratedSuffix) --name GITHUB-TOKEN --value '<your-github-token>'"
                echo ""
                echo "2. Update azure-pipelines.yml variables:"
                echo "   - FunctionAppName: fa-portfolio-$(GeneratedSuffix)"
                echo "   - ResourceGroupName: $RG_NAME"
                echo ""
                echo "3. Set pipeline variables for application deployments:"
                echo "   - AZURE_FUNCTION_APP_NAME=fa-portfolio-$(GeneratedSuffix)"
                echo "   - AZURE_RESOURCE_GROUP=$RG_NAME"
                echo "   - AZURE_STORAGE_ACCOUNT=stportfolio$(GeneratedSuffix)"
                echo "   - AZURE_KEY_VAULT=kv-portfolio-$(GeneratedSuffix)"
                
                # Output variables for consumption by other pipelines
                echo "##vso[task.setvariable variable=FunctionAppName;isOutput=true]fa-portfolio-$(GeneratedSuffix)"
                echo "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$RG_NAME"
                echo "##vso[task.setvariable variable=StorageAccountName;isOutput=true]stportfolio$(GeneratedSuffix)"
                echo "##vso[task.setvariable variable=KeyVaultName;isOutput=true]kv-portfolio-$(GeneratedSuffix)"
                echo "##vso[task.setvariable variable=StaticWebAppName;isOutput=true]swa-portfolio-$(GeneratedSuffix)"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

          # Display deployment outputs
          - task: AzureCLI@2
            displayName: "Show Deployment Outputs"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                RG_NAME="portfolio$(GeneratedSuffix)"
                echo "🔍 Deployment Summary:"
                echo "=========================="
                
                # Get deployment outputs
                OUTPUTS=$(az deployment group show \
                  --resource-group "$RG_NAME" \
                  --name main \
                  --query "properties.outputs" \
                  --output json 2>/dev/null || echo "{}")
                
                if [ "$OUTPUTS" != "{}" ]; then
                  echo "📊 Outputs:"
                  echo "$OUTPUTS" | jq -r 'to_entries[] | "  \(.key): \(.value.value)"'
                else
                  echo "  No outputs available"
                fi
                
                echo ""
                echo "🔑 Key Vault Secrets to Add:"
                echo "  az keyvault secret set --vault-name kv-portfolio-$(GeneratedSuffix) --name GROQ-API-KEY --value '<your-groq-key>'"
                echo "  az keyvault secret set --vault-name kv-portfolio-$(GeneratedSuffix) --name GITHUB-TOKEN --value '<your-github-token>'"
