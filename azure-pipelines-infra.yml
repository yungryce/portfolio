# Infrastructure Deployment Pipeline
# Purpose: Deploy Azure infrastructure for portfolio project
# - Triggers only on infrastructure changes or manual runs
# - Deploys Bicep template to create all Azure resources
# - Outputs resource names/IDs for application pipeline consumption
# - Uses portfolio service connection for authentication

trigger:
  branches:
    include:
      - feature/infra-test
      - main
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

pr:
  branches:
    include:
      - feature/infra-test
      - staging
      - main
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml


variables:
  - name: AzureServiceConnection
    value: 'Infra-test'
  - name: Location  
    value: 'westeurope'
  - name: ResourceGroupName
    value: 'portfolioRGWestEU' 
  - name: Suffix
    value: 'dev01'  # Stable environment suffix (keep constant for this environment)
  - name: DevOpsRepoUrl
    value: 'https://dev.azure.com/chxgbx/portfolio/_git/portfolio'
  - name: DevOpsBranch
    value: 'staging'
  - name: EnableRunFromPackage
    value: 'true'
  - group: portfolio-secrets

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Validate_Infrastructure
    displayName: "Validate Infrastructure"
    jobs:
      - job: validate_bicep
        displayName: "Validate Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"

          # Validate Bicep template with static RG
          - task: AzureCLI@2
            displayName: "Validate Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                
                echo "Validating Bicep template for Resource Group: $(ResourceGroupName)"
                
                # What-if deployment to preview changes
                az deployment group what-if \
                  --resource-group "$(ResourceGroupName)" \
                  --template-file infra/main.bicep \
                  --parameters \
                    location="$(Location)" \
                    suffix="$(Suffix)" \
                    devOpsRepoUrl="$(DevOpsRepoUrl)" \
                    devOpsBranch="$(DevOpsBranch)" \
                    enableRunFromPackage=$(EnableRunFromPackage) \
                  --only-show-errors || true
                
                echo "✅ Bicep template validation completed"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

  - stage: Deploy_Infrastructure
    displayName: "Deploy Infrastructure"
    dependsOn: Validate_Infrastructure
    condition: and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'],'refs/heads/feature/infra-test'),
          eq(variables['Build.SourceBranch'],'refs/heads/main')
        )
      )
    jobs:
      - job: deploy_bicep
        displayName: "Deploy Bicep Template"
        steps:
          - checkout: self
            fetchDepth: "1"

          - script: |
              echo "Current Azure CLI version:"
              az version --output table
              echo "Updating Azure CLI..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
              echo "Updated Azure CLI version:"
              az version --output table
            displayName: "Update Azure CLI"

          # Deploy infrastructure with static RG and existence check
          - task: AzureCLI@2
            displayName: "Deploy Bicep Template"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euo pipefail

                # Check if RG exists and create only if it doesn't
                if ! az group show --name "$(ResourceGroupName)" --query "name" --output tsv 2>/dev/null; then
                  echo "Creating Resource Group: $(ResourceGroupName)"
                  az group create --name "$(ResourceGroupName)" --location "$(Location)" --only-show-errors
                else
                  echo "Resource Group $(ResourceGroupName) already exists"
                fi

                echo "Running deployment (full output for diagnostics)..."
                DEPLOY_OUTPUT=$(mktemp)
                if ! az deployment group create \
                    --name main \
                    --resource-group "$(ResourceGroupName)" \
                    --template-file infra/main.bicep \
                    --parameters \
                      location='$(Location)' \
                      suffix='$(Suffix)' \
                      devOpsRepoUrl='$(DevOpsRepoUrl)' \
                      devOpsBranch='$(DevOpsBranch)' \
                      enableRunFromPackage=$(EnableRunFromPackage) \
                    --mode Incremental \
                    --output json \
                    > "$DEPLOY_OUTPUT" 2>&1; then
                  echo "❌ Deployment failed. Full CLI output:"
                  sed -n '1,200p' "$DEPLOY_OUTPUT" || true
                  echo "----"
                  tail -n +1 "$DEPLOY_OUTPUT"
                  exit 1
                fi

                echo "✅ Bicep deployment succeeded. Parsing outputs..."
                cat "$DEPLOY_OUTPUT" | jq -r '.properties.outputs // {}' > /tmp/deploy_outputs.json || true

                # attempt to read outputs safely
                if [ -s /tmp/deploy_outputs.json ]; then
                  jq -r 'to_entries[] | "  \(.key): \(.value.value)"' /tmp/deploy_outputs.json || true
                else
                  echo "  No outputs available"
                fi

                # Set pipeline outputs with static RG name
                echo "##vso[task.setvariable variable=FunctionAppName;isOutput=true]fa-portfolio-$(Suffix)"
                echo "##vso[task.setvariable variable=ResourceGroupName;isOutput=true]$(ResourceGroupName)"
                echo "##vso[task.setvariable variable=StorageAccountName;isOutput=true]stportfolio$(Suffix)"
                echo "##vso[task.setvariable variable=KeyVaultName;isOutput=true]kv-portfolio-$(Suffix)"
                echo "##vso[task.setvariable variable=StaticWebAppName;isOutput=true]swa-portfolio-$(Suffix)"
            env:
              AZURE_CORE_ONLY_SHOW_ERRORS: "true"

          # Show Deployment Outputs with static RG
          - task: AzureCLI@2
            displayName: "Show Deployment Outputs"
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "🔍 Deployment Summary:"
                echo "=========================="
                
                # Get deployment outputs
                OUTPUTS=$(az deployment group show \
                  --resource-group "$(ResourceGroupName)" \
                  --name main \
                  --query "properties.outputs" \
                  --output json 2>/dev/null || echo "{}")
                
                if [ "$OUTPUTS" != "{}" ]; then
                  echo "📊 Outputs:"
                  echo "$OUTPUTS" | jq -r 'to_entries[] | "  \(.key): \(.value.value)"'
                else
                  echo "  No outputs available"
                fi
                
                echo ""
                echo "🔑 Key Vault Secrets to Add:"
                echo "  az keyvault secret set --vault-name kv-portfolio-$(Suffix) --name GROQ-API-KEY --value '<your-groq-key>'"
                echo "  az keyvault secret set --vault-name kv-portfolio-$(Suffix) --name GITHUB-TOKEN --value '<your-github-token>'"
