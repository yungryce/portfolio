# .azure-pipelines.yml
# Purpose: CI/CD for fullstack app artifacts (DOES NOT DEPLOY INFRASTRUCTURE)
# - Backend: Python Azure Functions (Flex Consumption)
# - Frontend: Angular → Azure Static Web Apps
# - Path-based conditions: only runs stages when relevant files change
# - Infrastructure deployment is handled by azure-pipelines-infra.yml
# Notes:
# - Deploys on branch 'staging' and 'feature/artifact' temporaily (builds on PRs too)
# - Uses a stable Angular output path: 'dist/'
# - Requires infrastructure to be deployed first via azure-pipelines-infra.yml
# - Requires:
#     - Service connection: 'portfolio' (for SWA)
#     - Service connection: 'porfolio-repro' (for Function App)
#     - Variable group: 'portfolio-secrets' with SWA_TOKEN (fallback if needed)

resources:
  pipelines:
    - pipeline: infraPipeline               # local alias used below
      project: 'portfolio'                  # DevOps project name (case-sensitive)
      source: 'yungryce.portfolio (4)'      # <- set to the exact infra pipeline display name
      trigger: true                      # keep none or set true to auto-trigger

variables:
  - name: Node_Version
    value: '20.x'
  - name: Python_Version
    value: '3.11'
  - name: AzureServiceConnection
    value: 'Infra-test'
  # - name: FunctionAppName
  #   value: $[ resources.pipeline.infraPipeline.outputs['deploy_bicep.FunctionAppName'] ]
  # - name: ResourceGroupName
  #   value: $[ resources.pipeline.infraPipeline.outputs['deploy_bicep.ResourceGroupName'] ]
  # - name: FunctionAppName
  #   value: $[ coalesce(resources.pipeline.infraPipeline.outputs['deploy_bicep.FunctionAppName'], 'fa-portfolio-test') ]
  # - name: ResourceGroupName
  #   value: $[ coalesce(resources.pipeline.infraPipeline.outputs['deploy_bicep.ResourceGroupName'], 'portfolio-test') ]
  - name: FunctionAppName
    value: $[ coalesce(resources.pipeline.infraPipeline.outputs['Deploy_Infrastructure.deploy_bicep.FunctionAppName'], 'fa-portfolio-def') ]
  - name: ResourceGroupName
    value: $[ coalesce(resources.pipeline.infraPipeline.outputs['Deploy_Infrastructure.deploy_bicep.ResourceGroupName'], 'portfolio-def') ]
  - group: portfolio-secrets

trigger:
  branches:
    include:
      - main
      - staging
      - feature/artifact
  paths:
    include:
      - api/**
      - src/**
      - angular.json
      - package.json
      - package-lock.json
      - tsconfig.json
      - staticwebapp.config.json
    exclude:
      - infra/**
      - azure-pipelines-infra.yml
      - README.md
      - docs/**

pr:
  branches:
    include:
      - staging
      - fe
      - feature/*
  paths:
    include:
      - api/**
      - src/**
      - angular.json
      - package.json
      - package-lock.json
      - tsconfig.json
      - staticwebapp.config.json
    exclude:
      - infra/**
      - azure-pipelines-infra.yml
      - README.md
      - docs/**

stages:
  # -----------------------------
  # Backend: Build & Package
  # -----------------------------
  - stage: Backend_Build_Package
    displayName: "Backend (Functions) — Build & Package"
    condition: or(contains(variables['Build.SourceVersionMessage'], 'api/'), stageDependencies.CheckChanges.check_backend_changes.outputs['checkChanges.BackendChanged'])
    jobs:
      - job: check_backend_changes
        displayName: "Check Backend Changes"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: "0"
          - script: |
              git fetch origin --prune
              if git diff --name-only origin/main...HEAD | grep -E '^api/'; then
                echo "Backend changes detected"
                echo "##vso[task.setvariable variable=BackendChanged;isOutput=true]true"
              else
                echo "No backend changes detected"
                echo "##vso[task.setvariable variable=BackendChanged;isOutput=true]false"
              fi
            name: checkChanges
            displayName: "Check for backend changes"

      - job: build_backend
        displayName: "Build Function App (zip)"
        dependsOn: check_backend_changes
        condition: eq(dependencies.check_backend_changes.outputs['checkChanges.BackendChanged'], 'true')
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(Python_Version)'

          # Install direct (for tests or tooling); build reproducibility comes from vendoring step
          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
            displayName: "Install dependencies (tools)"
            workingDirectory: '$(Build.SourcesDirectory)/api'

          # Vendor dependencies into .python_packages per Azure Functions Python guidance
          - script: |
              pip install -r requirements.txt --target .python_packages/lib/site-packages
              rm -f local.settings.json || true
              find . -type d -name "__pycache__" -prune -exec rm -rf {} +
            displayName: "Vendor deps & clean"
            workingDirectory: '$(Build.SourcesDirectory)/api'

          # Create deployment zip
          - task: ArchiveFiles@2
            displayName: "Archive Function App to zip"
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/api'
              includeRootFolder: false
              archiveType: zip
              archiveFile: '$(Build.ArtifactStagingDirectory)/api.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish API artifact"
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/api.zip'
              ArtifactName: 'api'
              publishLocation: 'Container'

  # -----------------------------
  # Backend: Deploy 
  # -----------------------------
  - stage: Backend_Deploy
    displayName: "Backend (Functions)"
    dependsOn: Backend_Build_Package
    condition: and(
      succeeded(),
      or(
        eq(variables['Build.SourceBranch'], 'refs/heads/staging'),
        eq(variables['Build.SourceBranch'], 'refs/heads/feature/artifact')
      ),
      eq(stageDependencies.Backend_Build_Package.check_backend_changes.outputs['checkChanges.BackendChanged'], 'true')
    )
    jobs:
      - deployment: deploy_backend
        displayName: "Deploy Functions"
        environment: "staging"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: api

                # Optional: Verify the Function App exists before deployment
                - task: AzureCLI@2
                  displayName: "Verify Function App Exists"
                  inputs:
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      if az functionapp show --name $(FunctionAppName) --resource-group $(ResourceGroupName) --query name -o tsv; then
                        echo "Function App $(FunctionAppName) exists."
                      else
                        echo "Function App $(FunctionAppName) does not exist. Please create it first."
                        exit 1
                      fi

                - script: |
                    echo "FunctionAppName=$(FunctionAppName)"
                    echo "ResourceGroupName=$(ResourceGroupName)"
                  displayName: "Debug resolved infra outputs"

                - task: AzureFunctionApp@1
                  displayName: "Deploy Azure Function App"
                  inputs:
                    appType: 'functionAppLinux'
                    appName: '$(FunctionAppName)'
                    package: '$(Pipeline.Workspace)/api/api.zip'
                    resourceGroupName: '$(ResourceGroupName)'

  # -----------------------------
  # Frontend: Build & Deploy SWA
  # -----------------------------
  - stage: Frontend_Deploy_SWA
    displayName: "Frontend (Angular) — Deploy to Azure Static Web Apps"
    dependsOn: []   # independent of backend; keep if you want parallelism
    condition: and(
      succeeded(),
      eq(variables['Build.SourceBranch'], 'refs/heads/feature/staging'),
      eq(variables['Build.SourceBranch'], 'refs/heads/feature/feature/artifact')
      )
    jobs:
      - job: check_frontend_changes
        displayName: "Check Frontend Changes"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: "0"
          - script: |
              # Check if any frontend files changed
              git fetch origin --prune
              if git diff --name-only origin/main...HEAD | grep -E '^(src/|angular\.json|package\.json|package-lock\.json|tsconfig\.json|staticwebapp\.config\.json)'; then
                echo "Frontend changes detected"
                echo "##vso[task.setvariable variable=FrontendChanged;isOutput=true]true"
              else
                echo "No frontend changes detected"
                echo "##vso[task.setvariable variable=FrontendChanged;isOutput=true]false"
              fi
            name: checkChanges
            displayName: "Check for frontend changes"

      - deployment: deploy_frontend
        displayName: "Build & Deploy SWA"
        dependsOn: check_frontend_changes
        condition: eq(dependencies.check_frontend_changes.outputs['checkChanges.FrontendChanged'], 'true')
        environment: "staging"
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self    # ensure source is available for npm
                  fetchDepth: "1"

                - task: NodeTool@0
                  inputs:
                    versionSpec: '$(Node_Version)'

                # Optional but recommended: clean install
                - script: |
                    npm ci
                    npm run build:prod
                  displayName: "Build Angular (production)"
                  workingDirectory: '$(Build.SourcesDirectory)'

                - script: |
                    if [ -f staticwebapp.config.json ]; then
                      mkdir -p dist/browser
                      cp staticwebapp.config.json dist/browser/staticwebapp.config.json
                    fi
                  displayName: "Include SWA config in dist"
                  workingDirectory: '$(Build.SourcesDirectory)'

                - task: AzureStaticWebApp@0
                  displayName: "Deploy to Azure Static Web Apps"
                  inputs:
                    azure_static_web_apps_api_token: '$(SWA_TOKEN)'
                    workingDirectory: '$(Build.SourcesDirectory)'
                    app_build_command: ''
                    api_build_command: ''
