# AGENT EXECUTION MODEL & RULES
# This file serves as the PRIMARY ENTRY POINT for documentation generation agents
# When provided as context, agents MUST use this file to understand project structure and execution instructions

## EXECUTION SCOPE
TARGET_ROOT: /home/juk/DEV/cloud/functions
MISSION: Generate comprehensive documentation for all repositories and/or projects
SCHEMA_PATH: /home/juk/DEV/cloud/functions/schema

## AGENT BEHAVIOR RULES
1. **MANDATORY ENTRY POINT**: Always read this file first to understand execution context
2. **STRICT SCHEMA COMPLIANCE**: Follow ALL schema templates in /Schema directory
3. **FILE EXISTENCE VALIDATION**: Check for required files before optimization. if file adheres to schema, do not overwrite
5. **CONTENT PRESERVATION**: Optimize existing files, dont overwrite valid content
6. **TEMPLATE ADHERENCE**: Use Schema templates as authoritative guides

## PROJECT HIERARCHY STRUCTURE
```
repository/                          # Repository Level (e.g., /home/juk/DEV/cloud/functions/azure_vmss_cluster/)
├── README.md                        # Main project overview
├── .repo-context.json              # Metadata following Schema/.repo-context.json                    # License file
├── SKILLS-INDEX.md                 # Skills catalog following Schema/SKILLS-INDEX.md
├── ARCHITECTURE.md                 # System architecture following Schema/ARCHITECTURE.md
├── AUTHORS.md                       # List of authors following Schema/AUTHORS.md
├── LICENSE.txt                      # License file following Schema/LICENSE.txt
└── container/                      # Container Level (e.g., /home/juk/DEV/cloud/functions/azure_vmss_cluster/terraform/)
    ├── README.md                   # Container-specific overview
    ├── .repo-context.json         # Container metadata
    ├── ARCHITECTURE.md            # Container architecture
    └── PROJECT-MANIFEST.md        # Skills manifest following Schema/PROJECT-MANIFEST.md
```

## REQUIRED FILES MATRIX

### Repository Level (MANDATORY):
- README.md → Template: Schema/README.md
- .repo-context.json → Schema: Schema/.repo-context.json
- SKILLS-INDEX.md → Template: Schema/SKILLS-INDEX.md
- ARCHITECTURE.md → Template: Schema/ARCHITECTURE.md
- AUTHORS → Template: Schema/AUTHOR
- LICENSE.txt → Template: Schema/LICENSE.txt

### Container Level (MANDATORY):
- README.md → Template: Schema/README.md
- .repo-context.json → Schema: Schema/.repo-context.json  
- ARCHITECTURE.md → Template: Schema/ARCHITECTURE.md
- PROJECT-MANIFEST.md → Template: Schema/PROJECT-MANIFEST.md

## EXECUTION WORKFLOW

### PHASE 1: REPOSITORY ANALYSIS
1. Scan target repository structure
2. Identify missing required files
3. Analyze existing files for optimization opportunities. skip if file adheres to schema up to 75%
4. Collect project metadata (tech stack, purpose, features)

### PHASE 2: REPOSITORY DOCUMENTATION
For each repository in /home/juk/DEV/cloud/functions:
1. **README.md**: Create/optimize using Schema/README.md template
2. **.repo-context.json**: Generate metadata using Schema/.repo-context.json schema
3. **SKILLS-INDEX.md**: Document skills using Schema/SKILLS-INDEX.md template
4. **ARCHITECTURE.md**: Document architecture using Schema/ARCHITECTURE.md template
5. **AUTHORS**: Create contributor information using Schema/AUTHOR template
6. **LICENSE.txt**: Generate GNUPG license using Schema/LICENSE.txt template

### PHASE 3: CONTAINER DOCUMENTATION  
For each container within repositories:
1. **README.md**: Create container-specific overview
2. **.repo-context.json**: Generate container metadata
3. **ARCHITECTURE.md**: Document container architecture
4. **PROJECT-MANIFEST.md**: Create skills manifest using Schema/PROJECT-MANIFEST.md

### PHASE 4: VALIDATION & OPTIMIZATION
1. Verify all required files exist
2. Validate content against schema templates
3. Ensure consistency across documentation
4. Cross-reference skills and architecture information

## CONTENT GENERATION RULES

### README.md Generation:
- Use Schema/README.md as structural template
- Extract project purpose from existing files
- Identify tech stack from file extensions and imports
- Create meaningful project descriptions
- Include proper badges and formatting

### .repo-context.json Generation:
- Follow Schema/.repo-context.json schema EXACTLY
- Analyze code to determine tech_stack
- Map skills from SKILLS-INDEX.md or PROJECT-MANIFEST.md
- Identify project relationships and dependencies
- Populate all required schema fields

### SKILLS-INDEX.md Generation:
- Use Schema/SKILLS-INDEX.md template structure
- Aggregate skills from all all files and directories in the repository
- Organize by competency domains
- Reference specific files demonstrating skills
- Show skill progression across projects

### ARCHITECTURE.md Generation:
- Follow Schema/ARCHITECTURE.md template rules
- Create mermaid diagrams for system interactions
- Document component relationships
- Explain data flow and system design
- Include deployment and security considerations

### AUTHORS Generation:
- Use Schema/AUTHOR template structure exactly
- Maintain Chigbu Joshua as primary author
- Fill in dynamic placeholders (dates, cohort, location)
- Add additional contributors when applicable
- Ensure proper markdown formatting and links

### LICENSE.txt Generation:
- Create a LICENSE.txt file
- Place only at repository root level
- Use standard  GNUPG license text
- No modifications to license terms allowed
- Ensure proper file naming and encoding

### PROJECT-MANIFEST.md Generation:
- Use Schema/PROJECT-MANIFEST.md structure
- Focus on container-specific competencies
- Map learning outcomes to code implementations
- Document development workflow
- Include assessment criteria

## OPTIMIZATION STRATEGIES
- **Existing Files**: Enhance rather than replace. skip if already adheres to schema
- **Metadata Extraction**: Use code analysis to infer tech stack and skills
- **Template Adherence**: Strict compliance with Schema templates
- **Content Quality**: Professional, clear, comprehensive documentation
- **Cross-References**: Link related projects and skills
- **Consistency**: Uniform formatting and terminology across all files

## ERROR HANDLING
- Missing files: Create using appropriate Schema template
- Invalid content: Optimize according to Schema specifications
- Template conflicts: Schema templates take precedence
- Missing metadata: Infer from project analysis and code inspection

## VALIDATION CHECKLIST
□ All required files exist at repository level (README.md, .repo-context.json, SKILLS-INDEX.md, ARCHITECTURE.md, AUTHORS, LICENSE.txt)
□ All required files exist at container level (README.md, .repo-context.json, ARCHITECTURE.md, PROJECT-MANIFEST.md)
□ Content follows Schema template structures
□ Metadata schema compliance verified
□ Skills documentation comprehensive
□ Architecture documentation complete
□ AUTHORS file contains proper contributor information
□ LICENSE.txt contains standard GNUPG license
□ Cross-references validated
□ Professional quality standards met

